{"version":3,"sources":["types.ts","rolling.ts","stats.ts","index.ts"],"names":[],"mappings":"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","file":"src.6932414f.js","sourceRoot":"../src","sourcesContent":["export enum GeneratingMethod {\r\n  FourD6DropLowest,\r\n  FourD6DropHighest,\r\n  D20\r\n}\r\n\r\nexport type Settings = {\r\n  method: GeneratingMethod;\r\n};\r\n\r\nexport type Stats = {\r\n  [index: string]: number;\r\n  str: number;\r\n  dex: number;\r\n  con: number;\r\n  int: number;\r\n  wis: number;\r\n  cha: number;\r\n  totalModifier: number;\r\n};\r\n","export const fourD6DropLowest = (): number => {\r\n  const dieRolls = [rollDie(6), rollDie(6), rollDie(6), rollDie(6)];\r\n\r\n  const lowestRoll = Math.min(...dieRolls);\r\n\r\n  const sumOfRolls = dieRolls.reduce((sum, roll) => sum + roll, 0) - lowestRoll;\r\n\r\n  return sumOfRolls;\r\n};\r\n\r\nexport const fourD6DropHighest = (): number => {\r\n  const dieRolls = [rollDie(6), rollDie(6), rollDie(6), rollDie(6)];\r\n\r\n  const highestRoll = Math.max(...dieRolls);\r\n\r\n  const sumOfRolls =\r\n    dieRolls.reduce((sum, roll) => sum + roll, 0) - highestRoll;\r\n\r\n  return sumOfRolls;\r\n};\r\n\r\nexport const d20 = (): number => {\r\n  return rollDie(20);\r\n};\r\n\r\nfunction rollDie(size: number): number {\r\n  return Math.ceil(Math.random() * size);\r\n}\r\n","import { Stats, GeneratingMethod, Settings } from './types';\r\nimport { fourD6DropLowest, fourD6DropHighest, d20 } from './rolling';\r\n\r\nexport const getNewStats = (settings: Settings): Stats => {\r\n  const newStats = {\r\n    str: generateStat(settings),\r\n    dex: generateStat(settings),\r\n    con: generateStat(settings),\r\n    int: generateStat(settings),\r\n    wis: generateStat(settings),\r\n    cha: generateStat(settings),\r\n    totalModifier: 0\r\n  };\r\n\r\n  newStats.totalModifier = calculateTotalModifier(newStats);\r\n\r\n  return newStats;\r\n};\r\n\r\nfunction generateStat(settings: Settings): number {\r\n  switch (settings.method) {\r\n    case GeneratingMethod.FourD6DropLowest: {\r\n      return fourD6DropLowest();\r\n    }\r\n\r\n    case GeneratingMethod.FourD6DropHighest: {\r\n      return fourD6DropHighest();\r\n    }\r\n\r\n    case GeneratingMethod.D20: {\r\n      return d20();\r\n    }\r\n\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n\r\nexport function calculateTotalModifier(stats: Stats): number {\r\n  return (\r\n    calculateModifier(stats.str) +\r\n    calculateModifier(stats.dex) +\r\n    calculateModifier(stats.con) +\r\n    calculateModifier(stats.int) +\r\n    calculateModifier(stats.wis) +\r\n    calculateModifier(stats.cha)\r\n  );\r\n}\r\n\r\nfunction calculateModifier(stat: number): number {\r\n  return Math.floor(stat / 2 - 5);\r\n}\r\n\r\nexport const getReRoll = (settings: Settings): number => {\r\n  return generateStat(settings);\r\n};\r\n","import { Settings, GeneratingMethod, Stats } from './types';\r\nimport { getNewStats, getReRoll, calculateTotalModifier } from './stats';\r\n\r\nconst settings: Settings = {\r\n  method: GeneratingMethod.FourD6DropLowest\r\n};\r\n\r\nlet stats: Stats = {\r\n  str: 10,\r\n  dex: 10,\r\n  con: 10,\r\n  int: 10,\r\n  wis: 10,\r\n  cha: 10,\r\n  totalModifier: 0\r\n};\r\n\r\nregisterEventHandlers();\r\nregisterServiceWorker();\r\n\r\nfunction registerEventHandlers() {\r\n  const generateStatsButton = document.getElementById(\r\n    'give_stats_button'\r\n  ) as HTMLButtonElement;\r\n  generateStatsButton?.addEventListener('click', statButtonClickHandler);\r\n\r\n  const changeGeneratorMethodSelector = document.getElementById(\r\n    'method_select'\r\n  ) as HTMLSelectElement;\r\n  changeGeneratorMethodSelector?.addEventListener(\r\n    'change',\r\n    methodChangeHandler\r\n  );\r\n}\r\n\r\nfunction statButtonClickHandler() {\r\n  stats = getNewStats(settings);\r\n\r\n  updateElementWithValue('str', stats.str.toString());\r\n  updateElementWithValue('dex', stats.dex.toString());\r\n  updateElementWithValue('con', stats.con.toString());\r\n  updateElementWithValue('int', stats.int.toString());\r\n  updateElementWithValue('wis', stats.wis.toString());\r\n  updateElementWithValue('cha', stats.cha.toString());\r\n  updateElementWithValue('total_mod', stats.totalModifier.toString());\r\n\r\n  makeRerollVisible();\r\n}\r\n\r\nfunction updateElementWithValue(\r\n  identifier: string,\r\n  value: string,\r\n  append: boolean = false\r\n) {\r\n  const element = document.getElementById(identifier);\r\n\r\n  if (!element) {\r\n    return;\r\n  }\r\n\r\n  element.innerText = append ? `${element.innerText}${value}` : value;\r\n}\r\n\r\nfunction makeRerollVisible() {\r\n  const reRollButtonList = Array.from(\r\n    document.querySelectorAll('.re_roll_button')\r\n  ) as HTMLButtonElement[];\r\n\r\n  reRollButtonList.forEach(button => {\r\n    toggleElementVisibility(button, true);\r\n    button.addEventListener(\r\n      'click',\r\n      reRollClickHandler.bind(null, reRollButtonList)\r\n    );\r\n  });\r\n}\r\n\r\nfunction reRollClickHandler(buttonList: HTMLButtonElement[], event: Event) {\r\n  buttonList.forEach(button => {\r\n    toggleElementVisibility(button, false);\r\n  });\r\n\r\n  const currentTarget = event.currentTarget as HTMLButtonElement;\r\n\r\n  const reRoll = getReRoll(settings);\r\n\r\n  const reRolledStatName = currentTarget?.dataset?.stat as string;\r\n\r\n  const newStats = { ...stats, [reRolledStatName]: reRoll };\r\n\r\n  newStats.totalModifier = calculateTotalModifier(newStats);\r\n\r\n  updateElementWithValue(\r\n    reRolledStatName,\r\n    `${stats[reRolledStatName]} / ${newStats[reRolledStatName]}`\r\n  );\r\n\r\n  updateElementWithValue(\r\n    'total_mod',\r\n    `  ${stats.totalModifier} / ${newStats.totalModifier}`\r\n  );\r\n}\r\n\r\nfunction toggleElementVisibility(\r\n  element: HTMLElement | null,\r\n  visible: boolean\r\n) {\r\n  if (!element) {\r\n    return;\r\n  }\r\n\r\n  if (visible) {\r\n    element.style.visibility = 'visible';\r\n  } else {\r\n    element.style.visibility = 'hidden';\r\n  }\r\n}\r\n\r\nfunction methodChangeHandler(event: Event) {\r\n  const currentTarget = event.currentTarget as HTMLSelectElement;\r\n\r\n  switch (currentTarget?.value) {\r\n    case '4D6DropLowest': {\r\n      settings.method = GeneratingMethod.FourD6DropLowest;\r\n      return;\r\n    }\r\n\r\n    case '4D6DropHighest': {\r\n      settings.method = GeneratingMethod.FourD6DropHighest;\r\n      return;\r\n    }\r\n\r\n    case 'D20': {\r\n      settings.method = GeneratingMethod.D20;\r\n      return;\r\n    }\r\n\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction registerServiceWorker() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', async () => {\r\n      await navigator.serviceWorker.register('./service_worker.ts');\r\n    });\r\n  }\r\n}\r\n"]}